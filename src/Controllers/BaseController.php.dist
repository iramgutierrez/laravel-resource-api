<?php

/*
 * This file is part of the iramgutierrez/generate-resource-api project.
 *
 * (c) Iram GutiÃ©rrez <iramgutzglez@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace AppNamespace\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Iramgutierrez\API\Repositories\BaseRepository as Repository;
use Iramgutierrez\API\Managers\BaseManager as Manager;
use Iramgutierrez\API\Entities\BaseEntity as Entity;
use Illuminate\Support\MessageBag;



/**
 * Class BaseController
 * @package App\Http\Controllers
 */
abstract class BaseController extends Controller
{
    /**
     * @var Repository
     */
    protected $repository;

    /**
     * @var Manager
     */
    protected $manager;

    /**
     * @param Repository $Repository
     * @param Manager $Manager
     */
    public function __construct(Repository $Repository, Manager $Manager)
    {
        $this->repository = $Repository;

        $this->manager = $Manager;
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request)
    {
        $resources = $this->repository->all();

        return response()->json($resources);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(Request $request)
    {
        $data = $request->all();

        $response = $this->manager->save($data);

        if ($response instanceof Entity)
        {
            return response()->json($response, 200);
        }
        else if ($response instanceof MessageBag)
        {
            return response()->json($this->parseErrors($response), 400);
        }

        return response()->json(['error' => 'Server error. Try Again'], 500);
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function show(Request $request, $id)
    {
        $resource = $this->repository->findById($id);

        if (!$resource) {
            return response()->json(['error' => 'Entity not found'], 404);
        }
        return response()->json($resource);
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function update(Request $request, $id)
    {
        $resource = $this->repository->findById($id);

        if (!$resource) {
            return response()->json(['error' => 'Entity not found'], 404);
        }

        $data = $request->input();

        $this->manager->setEntity($resource);

        $response = $this->manager->update($data);

        if ($response instanceof Entity)
        {
            return response()->json($response, 200);
        }
        else if ($response instanceof MessageBag)
        {
            return response()->json($this->parseErrors($response), 400);
        }

        return response()->json(['error' => 'Server error. Try Again'], 500);
    }

    /**
     * @param Request $request
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy(Request $request , $id)
    {
        $resource = $this->repository->findById($id);

        if(!$resource)
        {
            return response()->json(['error' => 'Entity not found'] , 404);
        }

        $this->manager->setEntity($resource);

        $response = $this->manager->delete();

        if($response){

            return response()->make('', 204);
        }

        return response()->json(['error' => 'Server error. Try Again' ],500);
    }

    /**
     * @param MessageBag $bag
     * @return array
     */
    private function parseErrors(MessageBag $bag)
    {
        $errors = [];

        $keys = $bag->keys();

        foreach($keys as $key)
        {
            $errors[$key] = $bag->first($key);
        }

        return ['errors' => $errors];
    }
}
